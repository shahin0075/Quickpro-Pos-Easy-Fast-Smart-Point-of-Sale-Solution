@page "/user/change-password/{id:int}"
@inject UserService AuthService
@inject NavigationManager NavigationManager
@inject MudBlazor.ISnackbar Snackbar

<div class="row">
    <div class="d-flex align-items-center justify-content-center vh-100">
        <div class="card shadow p-4" style="max-width: 400px; width: 100%;">
            <EditForm Model="user" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="password" class="form-label">Old Password</label>
                    <input type="password" class="form-control" id="password" @bind="user.OldPassword" placeholder="Enter password" />
                    <ValidationMessage For="() => user.Password" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="password" @bind="user.NewPassword" placeholder="Enter password" />
                    <ValidationMessage For="() => user.Password" />
                </div>
                <button type="submit" class="btn btn-primary w-100">Change Password</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private UserMaster user = new UserMaster();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            user = await AuthService.GetUserMasterByIdAsync(Id) ?? new UserMaster();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            if(user.Password == user.OldPassword)
            {
                user.Password = user.NewPassword;
                bool isUpdated = await AuthService.UpdateUserMasterAsync(user);
                if (isUpdated)
                {
                    Snackbar.Add("Password changed successfully", Severity.Success);
                }
                else
                {
                    Snackbar.Add("User name already exists.", Severity.Warning);
                }
            }
            else
            {
                Snackbar.Add("Old password not found", Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving user: {ex.Message}", Severity.Error);
        }
    }
}
