@page "/report/balance-sheet"
@inject CompanyService companyService
@inject IPrintingService PrintingService
@inject ReportService reportService
@inject MudBlazor.ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <h4 class="text-center">Balance Sheet</h4>
        </div>
        <div class="card-body">
            <!-- Filter Section -->
            <div class="row mb-3">
                <div class="col-md-2">
                    <label>Date</label>
                    <InputDate @bind-Value="@fromDate" class="form-control" />
                </div>
                <div class="col-md-4 d-flex align-items-end">
                    <button class="btn btn-primary me-2" @onclick="LoadData"><i class="fas fa-search"></i> Search</button>
                    <button class="btn btn-secondary me-2" @onclick="@(_ => PrintingService.Print("printable-form", PrintType.Html))"><i class="fas fa-print"></i> Print</button>
                    <button class="btn btn-success me-2" @onclick="ExportToExcel"><i class="fas fa-file-excel"></i>Excel</button>
                    <button class="btn btn-danger" @onclick="PrintDiv"><i class="fas fa-file-pdf"></i> PDF</button>
                </div>
            </div>

            <hr />

            <!-- Report Section -->
            <div id="printable-form">
                <div class="text-center mb-4">
                    <h5>@company.CompanyName</h5>
                    <p>@company.Address</p>
                    <p>@company.PhoneNo</p>
                    <h6>Balance Sheet</h6>
                    <p>@fromDate.ToShortDateString()</p>
                </div>

                @if (balanceSheet == null)
                {
        <p>Loading...</p>
                }
                else
                {
        <table>
            <thead>
                <tr>
                    <th>Particulars</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                <!-- Assets Section -->
                <tr class="header">
                    <td colspan="2">Assets</td>
                </tr>
                            @foreach (var asset in balanceSheet.Assets)
                            {
                        <tr>
                            <td>@asset.Key</td>
                            <td>@asset.Value.ToString("N2")</td>
                        </tr>
                            }
                <tr class="total">
                    <td>Total Assets</td>
                    <td>@balanceSheet.TotalAssets</td>
                </tr>

                <!-- Liabilities Section -->
                <tr class="header">
                    <td colspan="2">Liabilities</td>
                </tr>
                            @foreach (var liability in balanceSheet.Liabilities)
                            {
                        <tr>
                            <td>@liability.Key</td>
                            <td>@liability.Value</td>
                        </tr>
                            }
                <tr>
                    <td>Equity</td>
                    <td>@balanceSheet.Equity</td>
                </tr>
                <tr class="total">
                    <td>Total Liabilities + Equity</td>
                    <td>@balanceSheet.TotalLiabilitiesAndEquity</td>
                </tr>
            </tbody>
        </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    DateTime fromDate;
    private BalanceSheetReportView balanceSheet;
    CompanyView company = new CompanyView();

    protected override async Task OnInitializedAsync()
    {
        company = await companyService.GetAllCompaniesByIdAsync(1);
        fromDate = DateTime.UtcNow.AddDays(1);
        await LoadData();
    }

    private async Task LoadData()
    {
        // try
        // {
        balanceSheet = await reportService.GetFormattedBalanceSheetReportAsync(fromDate);
            StateHasChanged();
        // }
        // catch (Exception ex)
        // {
        //     Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        // }
    }

    private async Task PrintDiv()
    {
        await JsRuntime.InvokeVoidAsync("printDiv", "printable-form");
    }

    private async Task ExportToExcel()
    {
        await JsRuntime.InvokeVoidAsync("exportToExcel", "printable-form");
    }
}
