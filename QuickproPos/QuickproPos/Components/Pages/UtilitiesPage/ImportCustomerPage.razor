@page "/import-customers"
@inject NavigationManager NavigationManager
@inject ExcelImportService ExcelImportService
@inject ItemPartiesExportService itemexportService

<div class="container mt-4">
    <!-- Header Section -->
    <div class="row align-items-center mb-3">
        <div class="col">
            <h4 class="text-primary">Import Customers</h4>
            <p class="text-muted"></p>
        </div>
    </div>

    <!-- Card Section -->
    <div class="card shadow-sm">
        <div class="card-body">
            <!-- Backup and Restore Buttons -->
            <div class="row mb-3 text-center">
                <div class="col-12 col-md-6 mb-3">
                    <button class="btn btn-primary" @onclick="DownloadFile">Download Sample</button>
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <div class="mb-3">
                        <label for="fileInput" class="form-label">Select Excel File</label>
                        <InputFile OnChange="@HandleFileChange" class="form-control" accept=".xlsx" />
                    </div>

                    <button @onclick="ImportData" class="btn btn-primary" disabled="@(!isFileSelected || isSaving)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Saving...</span>
                                    }
                        else
                        {
                            <span>Import Data</span>
                         }
                    </button>

                </div>
            </div>
            <!-- Instruction Section -->
            <div class="row">
                <div class="col text-center">
                    <p class="text-muted">
                    <p class="mt-3">@statusMessage</p>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedFilePath;
    private bool isFileSelected = false;
    private bool isSaving = false; // Flag to track saving state
    private string statusMessage = string.Empty;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 0) // Check if a file is selected
        {
            var file = e.File; // Get the first file
            selectedFilePath = Path.Combine(FileSystem.AppDataDirectory, file.Name);

            // Save uploaded file locally
            using var fileStream = new FileStream(selectedFilePath, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fileStream);

            isFileSelected = true;
            statusMessage = "File selected. Ready to import.";
        }
        else
        {
            statusMessage = "No file selected.";
        }
    }
    private void DownloadFile()
    {
        // Navigate to the file's URL
        NavigationManager.NavigateTo("downloaddemo/customer.xlsx", forceLoad: true);
    }
    private async Task ImportData()
    {
        isSaving = true; // Set saving flag
        statusMessage = "Importing data...";

        try
        {
            // Read data from Excel
            var parties = await ExcelImportService.ReadPartiesFromExcelAsync(selectedFilePath);

            // Save data into SQLite
            bool isSave = await itemexportService.SaveParties(parties , "Customer");

            if (isSave)
            {
                statusMessage = $"{parties.Count} customer imported successfully!";
                isFileSelected = false; // Disable the button after saving
            }
            else
            {
                statusMessage = "Error saving data. Please try again.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false; // Reset saving flag
        }
    }
}
